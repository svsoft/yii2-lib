<?php


namespace svsoft\yii\modules\properties\queries;


use svsoft\yii\modules\properties\models\data\Property;
use svsoft\yii\modules\properties\models\data\PropertyValue;
use yii\base\Exception;
use yii\db\ActiveQuery;
use yii\helpers\ArrayHelper;

class PropertyObjectQuery extends ActiveQuery
{

    private $propertyConditions = [];

    public function andProperty($condition)
    {
        $this->propertyConditions = ArrayHelper::merge($this->propertyConditions, $condition);

        return $this;
    }


    public function createCommand($db = null)
    {
        $this->filterByProperties();

        return parent::createCommand($db); // TODO: Change the autogenerated stub
    }

    private function filterByProperties()
    {
        $arrayId = $arraySlug = [];
        foreach($this->propertyConditions as $property=>$values)
        {
            if (is_numeric($property))
            {
                $arrayId[] = $property;
            }
            else
            {
                $arraySlug[] = $property;
            }
        }

        $where = ['or',['property_id'=>$arrayId], ['slug'=>$arraySlug]];

        if (!$arrayId)
        {
            $where = $where[2];
        }
        elseif (!$arrayId)
        {
            $where = $where[1];
        }

        $propertyItems = Property::find()->andWhere(['active'=>1])->andWhere($where)->select(['property_id','type','slug'])->asArray()->indexBy('property_id')->all();

        // Нормализация зсвойств
        $propertyValues = [];

        foreach($propertyItems as $item)
        {
            $slug = $item['slug'];
            $propertyId = $item['property_id'];

            if (array_key_exists($slug, $this->propertyConditions))
            {
                $values = $this->propertyConditions[$slug];
            }
            elseif (array_key_exists($propertyId, $this->propertyConditions))
            {
                $values = $this->propertyConditions[$propertyId];
            }
            else
            {
                // TODO:: Пока не работает надо переделать проверку
                throw new Exception('Property ' . $slug . ' is not found');
            }

            $item['values'] = $values;
            $propertyValues[$propertyId] = $item;
        }


        // Собираем условие для innerJoin
        $where = ['or'];
        foreach($propertyValues as $propertyId=>$item)
        {
            $columnName = Property::columnNameByType($item['type']);

            $where[] = ['property_id'=>$propertyId, $columnName=>$item['values']];
        }

        // Получаем id моделей
        $this->innerJoin(PropertyValue::tableName(), 'property_object.object_id = property_value.object_id')
            ->andWhere($where)
            ->asArray()
            ->indexBy('model_id')
            ->having(['count(property_value.object_id)'=>count($where) - 1])
            ->groupBy('property_value.object_id');
    }
}