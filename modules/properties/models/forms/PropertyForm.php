<?php
/**
 * Created by PhpStorm.
 * User: viktor
 * Date: 13.06.2017
 * Time: 23:17
 */

namespace svsoft\yii\modules\properties\models\forms;

use svsoft\yii\modules\properties\models\data\Property;
use svsoft\yii\modules\properties\models\data\PropertyObject;
use svsoft\yii\modules\properties\models\data\PropertyValue;
use svsoft\yii\modules\properties\models\forms\types\FloatValue;
use svsoft\yii\modules\properties\models\forms\types\StringValue;
use Yii;
use yii\base\Exception;
use yii\base\Model;
use yii\base\Object;
use yii\helpers\Html;

/**
 * Прикрепляется к объекту ObjectProperty.
 * Абстрактный клас. Наследниеи класа получаюю значение свойства соответстующего типа
 * из модели models\data\PropertyValue
 *
 * @property Property $property
 * @property Object $object
 * @property int $property_id
 * @property int $object_id
 * @property PropertyValue[] $propertyValues
 *
 * @package svsoft\yii\modules\properties\components
 */
abstract class PropertyForm extends Model
{
    /**
     * @var Property
     */
    public $property;

    public $object;

    /**
     *
     * Массив значений свойства для множественного свойства
     * Если значение есть в БД то ключ равет <value_id>#
     * А если значение новое то ключи по порядку
     *
     * @var
     */
    public $values;

    /**
     * Значение не множественного
     *
     * @var
     */
    public $value;

    public $_propertyValues;


    public function getProperty_id()
    {
        return $this->property->property_id;
    }

    public function getObject_id()
    {
        return $this->object->object_id;
    }

    public function setPropertyValues($propertyValues)
    {
        $this->_propertyValues = $propertyValues;
    }

    public function getPropertyValues()
    {
        if ($this->_propertyValues === null)
        {
            $this->_propertyValues = PropertyValue::findByObjectAndProperty($this->object_id, $this->property_id);
        }

        return $this->_propertyValues;
    }



    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub

        if (empty($this->property))
            throw new Exception('Property "property" is not set');

        if (empty($this->object))
            throw new Exception('Property "object" is not set');

        $propertyValues = $this->propertyValues;

//        if (!$propertyValues)
//            $propertyValues = PropertyValue::findByObjectAndProperty($this->object_id, $this->property_id);


        $values = [];


        /**
         * Формируем значение для модели см. описания @property values
         */
        if ($propertyValues)
        {
            foreach($propertyValues as $propertyValue)
            {
                $values[$propertyValue->value_id.'#'] = $propertyValue->value;
            }

            // Если у свойства не множественное значение то заполняем нулевой элемент значением
            if (!$this->property->multiple)
            {
                reset($values);
                $values = [current($values)];
                $this->value = $values[0];
            }

            $this->propertyValues = $propertyValues;
            $this->values = $values;
        }
    }


    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            //['values', 'each', 'rule' => ['string']]
        ];
    }

    public function formName()
    {
        $formName = parent::formName();

        $formName = $formName . '-' . $this->property->slug;

        return $formName;
    }

    public function saveMultiple()
    {
        $propertyValues = $this->propertyValues;

        $valid = true;

        foreach($this->values as $key=>$value)
        {
            $propertyValue = null;

            if (strpos($key, '#') !== false)
            {
                $valueId = (int)$key;

                if (!array_key_exists($valueId, $propertyValues))
                {
                    throw new Exception('valueId "' . $valueId . '" not fount');
                }

                $propertyValue = $propertyValues[$valueId];

                unset($propertyValues[$valueId]);
            }
            else
            {
                $propertyValue = new PropertyValue(['object_id' => $this->object_id, 'property_id' => $this->property_id]);
            }

            $propertyValue->value = $value;

            $this->savePropertyValue($propertyValue);
        }

        foreach($propertyValues as $propertyValue)
        {
            $propertyValue->delete();
        }

        return $valid;
    }

    public function save()
    {
        if (!$this->validate())
        {
            return false;
        }

        if ($this->property->multiple)
            return $this->saveMultiple();

        if ($this->propertyValues)
        {
            reset($this->_propertyValues);
            $propertyValue = current($this->_propertyValues);
        }
        else
            $propertyValue = new PropertyValue(['object_id' => $this->object_id, 'property_id' => $this->property_id]);

        $propertyValue->value = $this->value;

        return $this->savePropertyValue($propertyValue);
    }

    /**
     * @param PropertyValue $propertyValue
     *
     * @return bool
     */
    public function savePropertyValue($propertyValue)
    {
        if (!$propertyValue->isNewRecord && !$propertyValue->value)
        {
            $propertyValue->delete();
            return true;
        }

        if ($propertyValue->value)
        {
            return $propertyValue->save();
        }

        return true;
    }

    public function getFirsValueId()
    {
        foreach($this->propertyValues as $key=>$item)
            return $key;
    }


    /**
     * @param PropertyObject $object
     * @param Property $property
     * @param PropertyValue[]|null $propertyValues
     *
     * @return PropertyValue
     * @throws Exception
     */

    static public function createForm($object, $property, $propertyValues = null)
    {
        $class = $property->getTypeClass();

        $model = new $class(['property' => $property, 'object' => $object, 'propertyValues' => $propertyValues]);

        return $model;
    }

// Над этим надо еще подумать. Сейчас беспокоит что в модели используется Html::encode и т.д. для отображения

//    public function appendValue($value)
//    {
//        if (!$this->property->multiple)
//            throw new Exception('Property is not multiple');
//
//        $this->values[] = $value;
//    }
//
//    public function setValue($value, $valueId = null)
//    {
//        if (!$this->property->multiple)
//            $this->values[0] = $value;
//        else
//        {
//            if (!$valueId)
//                throw new Exception('Param value_id is not set');
//
//            if (!array_key_exists($valueId . '#', $this->values))
//                throw new Exception('Param value_id = "'.$valueId.'" does not have');
//
//            $this->values[$valueId . '#'] = $value;
//        }
//    }
//
//    public function displayValue($value = null)
//    {
//        if ($value === null)
//            $value = $this->values[0];
//
//        return Html::encode($value);
//    }
//
//    public function displayValues()
//    {
//        foreach($this->values as $value)
//        {
//            $this->displayValue($value);
//        }
//    }
}